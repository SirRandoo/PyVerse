# This file describes an example manifest used by the build process to
# identify the mod, as well as the environments that the mod will run in.
#
# An important note is that the build system *will* remove any XHTML used
# within the manifest. Manifests are used to describe the mod, not modify how
# those descriptions are presented. If this is important to you, assign a file
# to the property by setting the property's value to "file://path/to/file"

# The "id" property translates to the "package id" of a mod.
# You aren't explicitly required to include this since RimWorld will stitch
# a package id together from the mod's name and the core mod's core author,
# so this behavior is mimicked in the build system.
id: com.example.mod

# The "name" property indicates the name of the mod as displayed in RimWorld.
name: Example Mod

# The "description" property is an optional description of the mod.
# Users can read the mod's description in the game's "mods config" menu, and
# they can also read the first description of the mod when it's uploaded to
# the Steam workshop through RimWorld.
description: >
  This is an example mod that demonstrates the build system's manifest.

# The "version" property is the current version of the mod.
# In the event you'd prefer to link the version to the version of a C# project,
# you can bind the version to a given project by setting its value to
# "project://path/to/project.csproj" OR "project:Example.Mod"
#
# The first binder is a path to a C#'s project's .csproj file, if it wasn't
# apparent. The latter binder substitutes the project's path with the project's
# name.
#
# The path binder doesn't have any special "lookup" functionality, it simply
# uses the path you provide to resolve the project whose version is being
# extracted.
#
# The project name binder has special "lookup" functionality in the sense that
# it looks for the project's name in a dictionary, then retrieves the path to
# the .csproj from said dictionary.
#
# In any case, the .csproj is used to find the root directory of a project.
# After the root directory is found, the version is extracted from either the
# project file itself if the "GenerateAssemblyInfo" property is set in the
# project, or from the "Properties/AssemblyInfo.cs" file if
# "GenerateAssemblyInfo" wasn't set. Whichever ends up being used, the build
# system will progress down the version list of version attributes/properties:
#   1. InformationalVersion
#   2. AssemblyFileVersion
#   3. AssemblyVersion
# to find a property that exists, and has a valid version. That version is
# then substituted into the manifest verbatim.
version: 0.1.0

# The "authors" property is a list of people that have worked on the mod.
# The first author in the list is inserted into the "author" property of the
# final, transpiled About.xml file generated by the build system, and the
# other authors are inserted into the "authors" property.
#
# This may be important to you if you care about how RimWorld will display the
# order of authors in some versions. The first author will be displayed first,
# and all others will be displayed, in order, after the first author.
#
# If no authors are specified, RimWorld will instead display "Unknown." If
# you handcraft an About.xml file, or modify the build system's, and choose
# to omit the "author" property in favor of the "authors" property, RimWorld
# will display "Unknown" followed by the authors listed in the "authors"
# property.
authors:
  - Author
  - Other Author
  - Another Author

# The "links" property is a list of objects that contain a "type" property and
# a "link" property.
#
# The "type" property is an enum indicating the type of link being listed.
# Below are the possible values of the enum:
#   - SOURCE
#       - Indicates that the link provided directs users to the source code for
#         the mod.
#   - DOCUMENTATION
#       - Indicates that the link provided directs users to the documentation
#         for the mod.
#   - WEBSITE
#       - Indicates that the link provided directs users to the official
#         website of the mod.
#
# The "link" property is the actual link, unsurprisingly.
#
# Since RimWorld's About.xml file only supports one link, the order for which
# link will be used in the "url" property is as follows:
#   WEBSITE -> DOCUMENTATION -> SOURCE
#
# All other links will be placed in the "links" element under a custom
# "metadata" element that's used for additional metadata not supported by the
# game.
links:
  - type: SOURCE
    link: https://github.com/sirrandoo/rimpy
  - type: DOCUMENTATION
    link: https://sirrandoo.github.io/rimpy
  - type: WEBSITE
    link: https://github.com/sirrandoo/rimpy

# The "supported_versions" property indicates the versions of the game the mod
# supports. Each object must contain two properties: version and status
#
# The "status" property indicates the support status of the version. Below are
# the list of statuses the build system supports:
#   - SUPPORTED
#       - The version of the mod for this game version is actively receiving
#         updates from the mod authors, including content updates.
#   - MAINTENANCE
#       - The version of the mod for this game version is actively receiving
#         updates from the mod authors. Updates are exclusively limited to bug
#         fixes.
#   - UNSUPPORTED
#       - The version of the mod for this game version is no longer receiving
#         updates from the mod authors.
#
# The "version" property indicates a range of game versions.
supported_versions:
  - version: ">=1.4"
    status: SUPPORTED
  - version: "1.2"
    status: MAINTENANCE
  - version: "<1.1"
    status: UNSUPPORTED

# The "dependencies" property indicates the other mods the mod depends on in
# order to run.
#
# The build system always ensures dependencies are included in the "loadBefore"
# property in the final About.xml metadata file. This serves as a hint to
# RimWorld's mod sorting system to ensure dependencies are placed higher in the
# load order than the mod.
#
# The "dependencies" property is a list of objects that contain "id," and
# optionally "version", "game_version", and/or "optional." The "id" property
# indicates the id of the mod being attached as a dependency. The
# "game_version" property indicates the version(s) of the game the dependency
# is applicable to. The "optional" property indicates whether the dependency is
# optional. Optional dependencies aren't required for the mod to run
# successfully, but may optionally provide additional functionality should the
# mod be active while the mod is active.
dependencies:
  - id: com.example.dependency
    version: "1.0.0"
  - id: com.example.dependency.polyfill
    optional: true
    game_version: "<=1.3"

# The "load_hints" property indicates where other mods should be placed
# relative to the mod. This property is a list of objects that contain two
# properties: id and order.
#
# The "id" property indicates the id of the mod being hinted about, while the
# "order" property indicates the relative order of the hinted mod within the
# load order. The property must be set to either "AFTER" or "BEFORE."
load_hints:
  - id: com.author.mod
    order: AFTER
  - id: com.author.example.mod
    order: BEFORE

# The "load_folders" property is a list of objects that indicate directories
# that should be indexed by the game for content. Each object consists of one
# required property "path," which is the path to the directory that should be
# indexed. This directory should contain at least one standard content
# directory. Optional properties consist of: game_version
#
# The property "game_version" is a version range that indicates the game
# versions the path applies to. The range is compared against the versions
# defined in the "supported_versions" property during the transpile stage of
# the build process, then any version that matches the version range is
# marked, and the path is conditionally loaded for the given game version.
load_folders:
  - path: ./directory/$(GameVersion)
  - path: ./another-directory/
    game_version: ">=1.5"
